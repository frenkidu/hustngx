#!/usr/bin/python
# email: yao050421103@gmail.com
import sys
import os.path
import datetime
import string
import json

DEFAULT_USER = 'search'
merge = lambda l: string.join(l, '\n')
INDEX_TAG = '@index_place_holder'

def manual(): 
    print """
    usage:
        python deploygen.py [user] [cmd_file] [host_file] > [output]
    sample:
        python deploygen.py cmd.json hosts > deploy.sh
        python deploygen.py search cmd.json hosts > deploy.sh
        """

class ShellGen:
    def __init__(self):
        self.header = [
            '#!/bin/sh',
            '##############################################################################',
            '# NOTE : Generated by deploygen. It is NOT supposed to modify this file.',
            '##############################################################################'
            ]
        self.__gen_scp_cmd = lambda user, host: lambda item: merge([
            'sudo -u %s \\' % user,
            '    scp -oStrictHostKeyChecking=no \\',
            '    %s \\' % item['local'],
            '    %s@%s:%s' % (user, host, item['remote'])
            ])
        self.__gen_scp = lambda user, host, scp: map(self.__gen_scp_cmd(user, host), scp)
        self.__gen_ssh_cmd = lambda index: lambda cmd: '    %s; \\' % cmd.replace(INDEX_TAG, index)
        self.__gen_ssh = lambda index, user, host, ssh: [
            'sudo -u %s \\' % user,
            '    ssh -oStrictHostKeyChecking=no \\',
            '    %s@%s \\' % (user, host),
            '    \' \\',
            merge(map(self.__gen_ssh_cmd(index), ssh)),
            '    \''
            ]
        self.__gen_host_cmd = lambda index, user, host: lambda cmd: merge(
            self.__gen_scp(user, host, cmd['value'])
            ) if 'scp' == cmd['key'] else merge(
                self.__gen_ssh(index, user, host, cmd['value'])
                ) if 'ssh' == cmd['key'] else ''
        self.__gen_host_cmds = lambda index, user, cmds: lambda host: merge([
            'echo \'[%s]...\'' % host,
            '',
            merge(map(self.__gen_host_cmd(index, user, host), cmds)),
            ''
            ])
        
    def gen(self, user, cmds, hosts):
        return merge([
            merge(self.header),
            merge([self.__gen_host_cmds(str(hosts.index(host)), user, cmds)(host) for host in hosts]),
            'echo \'finish!\'',
            ])
            
def get_json_data(path):
    json_filter = lambda f: (lambda f, l: os.path.splitext(f)[1] in l)(f, ['.json'])
    if not json_filter(path):
        return None
    f = open(path, 'r')
    data = json.load(f)
    f.close()
    return data

def get_hosts(path):
    f = open(path, 'r')
    hosts = filter(lambda s: len(s) > 0, map(lambda s: s.split('\n')[0].split('\r')[0], f.readlines()))
    f.close()
    return hosts
    
def gen(user, cmd_file, host_file):
    cmds = get_json_data(cmd_file)
    if not cmds:
        return None
    hosts = get_hosts(host_file)
    obj = ShellGen()
    return obj.gen(user, cmds, hosts)
                
def parse_shell(argv):
    size = len(argv)
    if size < 3 or size > 4:
        return False
    cmd_index = 1
    host_index = 2
    user = DEFAULT_USER
    if 4 == size:
        cmd_index = 2
        host_index = 3
        user = argv[1]
    data = gen(user, argv[cmd_index], argv[host_index])
    if not data:
        return False
    print data
    return True

if __name__ == "__main__":
    if not parse_shell(sys.argv):
        manual()