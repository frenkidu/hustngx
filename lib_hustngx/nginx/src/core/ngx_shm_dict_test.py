#!/usr/bin/python
#author: jobs
#email: yao050421103@gmail.com
import sys
import os.path
import datetime
import string
import json

FILTER = '@null_string_place_holder'
merge = lambda l: string.join(filter(lambda item: FILTER != item, l), '\n')

get_val = lambda field, type: (
    '    %s %s = (%s) atof((const char *)args->%s.data);'
    ) % (type['ctype'], field, type['ctype'], field) if 'double' == type['ctype'] else (
    '    %s val = args->val;' % type['ctype']) if 'ngx_str_t' == type['ctype'] else (
    '    %s val = { args->val.len, args->val.data };' % type['ctype']
    ) if 'ngx_binary_t' == type['ctype'] else merge([
    '    char * tail = NULL;',
    '    %s %s = (%s) %s((const char *)args->%s.data, &tail, 10);' % (
        type['ctype'], field, type['ctype'], 'strtoull' if type['unsigned'] else 'strtoll', field)
    ])
gen_read_base = lambda type, args: merge([
    '    %s val = %s;' % (type['ctype'], type['val']),
    '    if (NGX_OK != ngx_shm_dict_get_%s(ngx_shm_dict_test_get_zone(), %s))' % (type['key'], args),
    '    {',
    '        return ngx_http_send_response_imp(NGX_HTTP_NOT_FOUND, NULL, r);',
    '    }',
    ])
gen_read = lambda type: merge([
    'static ngx_int_t __get_%s(ngx_str_t * key, ngx_http_request_t * r)' % type['key'],
    '{',
    merge([
        gen_read_base(type, 'key, r->pool, &val'),
        '    return ngx_http_send_response_imp(NGX_HTTP_OK, &val, r);'
        ]) if 'string' == type['from'] else merge([
        gen_read_base(type, 'key, r->pool, &val'),
        '    ngx_str_t response = { val.len, (u_char *)val.data };',
        '    return ngx_http_send_response_imp(NGX_HTTP_OK, &response, r);'
        ]) if 'binary' == type['from'] else merge([
        gen_read_base(type, 'key, &val'),
        '    ngx_str_t response = ngx_shm_dict_test_from_%s(r->pool, val);' % type['from'],
        '    return ngx_http_send_response_imp(NGX_HTTP_OK, &response, r);'
        ]),
    '}',
    ''
    ])
mod_args = '(ngx_shm_dict_test_get_zone(), &args->key, delta, args->expire, &result)'
gen_mod = lambda method, type: merge([
    'static ngx_int_t __%s_%s(ngx_pool_t * pool, ngx_shm_dict_mod_args_t * args)' % (method, type['key']),
    '{',
    get_val('delta', type),
    '    %s result = 0;' % type['ctype'],
    '    int rc = ngx_shm_dict_%s_%s%s;' % (method, type['key'], mod_args),
    '    if (NGX_OK != rc)',
    '    {',
    '        return NGX_ERROR;',
    '    }',
    '    args->result = ngx_shm_dict_test_from_%s(pool, result);' % type['from'],
    '    return NGX_OK;',
    '}',
    ''
    ])
ngx_shm_dict_types = [
    { 'key': 'int8', 'ctype': 'int8_t', 'unsigned': False, 'from': 'int', 'numeric': True, 'val': '0' },
    { 'key': 'uint8', 'ctype': 'uint8_t', 'unsigned': True, 'from': 'uint', 'numeric': True, 'val': '0' },
    { 'key': 'int16', 'ctype': 'int16_t', 'unsigned': False, 'from': 'int', 'numeric': True, 'val': '0' },
    { 'key': 'uint16', 'ctype': 'uint16_t', 'unsigned': True, 'from': 'uint', 'numeric': True, 'val': '0' },
    { 'key': 'int32', 'ctype': 'int32_t', 'unsigned': False, 'from': 'int', 'numeric': True, 'val': '0' },
    { 'key': 'uint32', 'ctype': 'uint32_t', 'unsigned': True, 'from': 'uint', 'numeric': True, 'val': '0' },
    { 'key': 'int64', 'ctype': 'int64_t', 'unsigned': False, 'from': 'int', 'numeric': True, 'val': '0' },
    { 'key': 'uint64', 'ctype': 'uint64_t', 'unsigned': True, 'from': 'uint', 'numeric': True, 'val': '0' },
    { 'key': 'double', 'ctype': 'double', 'from': 'double', 'numeric': True, 'val': '0.0' },
    { 'key': 'string', 'ctype': 'ngx_str_t', 'from': 'string', 'numeric': False, 'val': '{ 0, 0 }' },
    { 'key': 'binary', 'ctype': 'ngx_binary_t', 'from': 'binary', 'numeric': False, 'val': '{ 0, 0 }' }
]
ngx_shm_dict_write_methods = ['add', 'safe_add', 'replace', 'set', 'safe_set']
        
def gen(path, types, write_methods):
    __header = [
        '/**',
        '********************************************************************************',
        '* NOTE : Generated by ngx_shm_dict_test. It is NOT supposed to modify this file.',
        '*******************************************************************************/'
        ]
    __test_read_dec = 'ngx_int_t ngx_shm_dict_test_read(ngx_shm_dict_read_args_t * args, ngx_http_request_t * r)'
    __test_write_dec = 'ngx_int_t ngx_shm_dict_test_write(ngx_shm_dict_write_args_t * args)'
    __test_mod_dec = lambda method: 'ngx_int_t ngx_shm_dict_test_%s(ngx_pool_t * pool, ngx_shm_dict_mod_args_t * args)' % method
    __get_head_def = lambda path: '__%s_%s_h__' % (
        os.path.basename(path).lower(), datetime.datetime.now().strftime('%Y%m%d%H%M%S')
        )
    def __write(url, data):
        with open(url, 'w') as f:
            f.writelines(data)
    def __gen_test_interface(path, types, write_methods):
        __includes = [
            "#include <ngx_http.h>",
            '#include "ngx_shm_dict.h"',
            '#include "ngx_shm_dict_test_utils.h"'
            ]
        head_def = __get_head_def(path)
        __write(path + ".h", merge([
            merge(__header),
            '#ifndef %s' % head_def,
            '#define %s' % head_def,
            '',
            merge(__includes),
            '',
            '%s;' % __test_read_dec,
            '%s;' % __test_write_dec,
            '%s;' % __test_mod_dec('incr'),
            '%s;' % __test_mod_dec('decr'),
            '',
            '#endif // %s' % head_def
            ]))
    def __gen_test_implement(path, types, write_methods):
        __test_each_write = lambda key: {
            'key': key, 
            'imp': lambda type: merge([
                'static ngx_int_t __%s_%s(ngx_shm_dict_write_args_t * args)' % (key, type['key']),
                '{',
                get_val('val', type),
                '    return ngx_shm_dict_%s_%s(ngx_shm_dict_test_get_zone(), &args->key, val, args->expire);' % (key, type['key']),
                '}',
                ''
                ])
            }
        __gen_test_read = lambda types: merge([
            merge([gen_read(type) for type in types]),
            'static ngx_shm_dict_test_read_item_t g_read_dict[] = {',
            merge(['    { ngx_string("%s"), __get_%s },' % (type['key'], type['key']) for type in types]),
            '};',
            'static size_t g_read_dict_len = sizeof(g_read_dict) / sizeof(ngx_shm_dict_test_read_item_t);',
            __test_read_dec,
            '{',
            '    return ngx_shm_dict_test_read_base(g_read_dict, g_read_dict_len, args, r);',
            '}',
            ''
            ])
        __gen_write_methods = lambda methods: [__test_each_write(method) for method in methods]
        __gen_write_item = lambda method, types: [
            ('    { ngx_string("%s"), ngx_string("%s"), __%s_%s },') % (
                method, type['key'], method, type['key']) for type in types
            ]
        __gen_test_write = lambda types, write_methods: merge([
            merge(map(lambda method: merge([method['imp'](type) for type in types]), __gen_write_methods(write_methods))),
            'static ngx_shm_dict_test_write_item_t g_write_dict[] = {',
            merge(map(lambda method: merge(__gen_write_item(method, types)), write_methods)),
            '};',
            'static size_t g_write_dict_len = sizeof(g_write_dict) / sizeof(ngx_shm_dict_test_write_item_t);',
            __test_write_dec,
            '{',
            '    return ngx_shm_dict_test_write_base(g_write_dict, g_write_dict_len, args);',
            '}'
            ])
        __gen_test_mod = lambda method, types: merge([
            merge([gen_mod(method, type) for type in types]),
            'static ngx_shm_dict_test_mod_item_t g_%s_dict[] = {' % method,
            merge(['    { ngx_string("%s"), __%s_%s },' % (type['key'], method, type['key']) for type in types]),
            '};',
            'static size_t g_%s_dict_len = sizeof(g_%s_dict) / sizeof(ngx_shm_dict_test_mod_item_t);' % (method, method),
            __test_mod_dec(method),
            '{',
            '    return ngx_shm_dict_test_mod_base(g_%s_dict, g_%s_dict_len, pool, args);' % (method, method),
            '}',
            ''
            ])
        numeric_types = filter(lambda type: type['numeric'], types)
        __write(path + ".c", merge([
            merge(__header),
            '#include "%s.h"' % os.path.basename(path),
            '',
            __gen_test_read(types),
            __gen_test_write(types, write_methods),
            __gen_test_mod('incr', numeric_types),
            __gen_test_mod('decr', numeric_types)
            ]))
    __gen_test_interface(path, types, write_methods)
    __gen_test_implement(path, types, write_methods)

def get_path(argv):
    __path = '.' if 2 != len(argv) else argv[1]
    return os.path.join(os.path.abspath(__path), 'ngx_shm_dict_test')

if __name__ == "__main__":
    gen(get_path(sys.argv), ngx_shm_dict_types, ngx_shm_dict_write_methods)